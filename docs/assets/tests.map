{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/expression-block-test.js","dummy/tests/integration/components/expression-builder-select-test.js","dummy/tests/integration/components/expression-builder-test.js","dummy/tests/integration/helpers/is-equal-test.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'dummy/app', 'dummy/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/integration/components/expression-block-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('expression-block', 'Integration | Component | expression block', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('empty block empty block text', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"A+wenPmK\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"id\\\"],[123]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), 'Pass options to select type', 'assert.equal(this.$().text().trim(), \\'Pass options to select type\\')');\n    assert.ok(this.$('.block[data-id=\"123\"]').length, 'assert.ok(this.$(\\'.block[data-id=\"123\"]\\').length)');\n  });\n\n  (0, _emberQunit.test)('block without id generates one', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"FXeNs1b1\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"expression-block\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), 'Pass options to select type', 'assert.equal(this.$().text().trim(), \\'Pass options to select type\\')');\n    var cls = this.$('div:first-child').attr('data-id');\n    assert.ok(cls.match(/ember\\d+/), 'assert.ok(cls.match(/ember\\\\d+/))');\n  });\n\n  (0, _emberQunit.test)('empty block does show if there are no options', function (assert) {\n    this.set('options', {});\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kp1pQT/r\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), 'Pass options to select type', 'assert.equal(this.$().text().trim(), \\'Pass options to select type\\')');\n  });\n\n  (0, _emberQunit.test)('block shows type selection if there are options', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kp1pQT/r\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('select > option:first-child').text().trim(), 'Select type', 'assert.equal(this.$(\\'select > option:first-child\\').text().trim(), \\'Select type\\')');\n    assert.equal(this.$('select > option:last-child').text().trim(), 'y', 'assert.equal(this.$(\\'select > option:last-child\\').text().trim(), \\'y\\')');\n  });\n\n  (0, _emberQunit.test)('can select type option', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kp1pQT/r\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('select > option:selected').text().trim(), 'Select type', 'assert.equal(this.$(\\'select > option:selected\\').text().trim(), \\'Select type\\')');\n    this.$('option[value=\"y\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-type select > option:selected').text().trim(), 'y', 'assert.equal(this.$(\\'.block-type select > option:selected\\').text().trim(), \\'y\\')');\n  });\n\n  (0, _emberQunit.test)('after type is selected one can select value option based on the type', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kp1pQT/r\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('select > option:selected').text().trim(), 'Select type', 'assert.equal(this.$(\\'select > option:selected\\').text().trim(), \\'Select type\\')');\n    assert.notOk(this.$('.block-value select').length, 'assert.notOk(this.$(\\'.block-value select\\').length)');\n    this.$('option[value=\"y\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-type select > option:selected').text().trim(), 'y', 'assert.equal(this.$(\\'.block-type select > option:selected\\').text().trim(), \\'y\\')');\n    assert.ok(this.$('.block-value').length, 'assert.ok(this.$(\\'.block-value\\').length)');\n    assert.equal(this.$('.block-value select > option:selected').text().trim(), 'Select value', 'assert.equal(this.$(\\'.block-value select > option:selected\\').text().trim(), \\'Select value\\')');\n    assert.equal(this.$('.block-value select > option').text().trim(), 'Select value23', 'assert.equal(this.$(\\'.block-value select > option\\').text().trim(), \\'Select value23\\')');\n  });\n\n  (0, _emberQunit.test)('values change based on type', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kp1pQT/r\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('select > option:selected').text().trim(), 'Select type', 'assert.equal(this.$(\\'select > option:selected\\').text().trim(), \\'Select type\\')');\n    assert.notOk(this.$('.block-value select').length, 'assert.notOk(this.$(\\'.block-value select\\').length)');\n    this.$('option[value=\"y\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-type select > option:selected').text().trim(), 'y', 'assert.equal(this.$(\\'.block-type select > option:selected\\').text().trim(), \\'y\\')');\n    assert.ok(this.$('.block-value').length, 'assert.ok(this.$(\\'.block-value\\').length)');\n    assert.equal(this.$('.block-value select > option:selected').text().trim(), 'Select value', 'assert.equal(this.$(\\'.block-value select > option:selected\\').text().trim(), \\'Select value\\')');\n    assert.equal(this.$('.block-value select > option').text().trim(), 'Select value23', 'assert.equal(this.$(\\'.block-value select > option\\').text().trim(), \\'Select value23\\')');\n    this.$('option[value=\"x\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-value select > option').text().trim(), 'Select value1', 'assert.equal(this.$(\\'.block-value select > option\\').text().trim(), \\'Select value1\\')');\n  });\n\n  (0, _emberQunit.test)('types change based on options', function (assert) {\n    this.set('options', { 'y': [2, 3] });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kp1pQT/r\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('.block-type select > option').text().trim(), 'Select typey', 'assert.equal(this.$(\\'.block-type select > option\\').text().trim(), \\'Select typey\\')');\n    this.set('options', { 'x': [1] });\n    assert.equal(this.$('.block-type select > option').text().trim(), 'Select typex', 'assert.equal(this.$(\\'.block-type select > option\\').text().trim(), \\'Select typex\\')');\n  });\n\n  (0, _emberQunit.test)('type changes clear selected value', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kp1pQT/r\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('select > option:selected').text().trim(), 'Select type', 'assert.equal(this.$(\\'select > option:selected\\').text().trim(), \\'Select type\\')');\n    assert.notOk(this.$('.block-value select').length, 'assert.notOk(this.$(\\'.block-value select\\').length)');\n    this.$('option[value=\"y\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-type select > option:selected').text().trim(), 'y', 'assert.equal(this.$(\\'.block-type select > option:selected\\').text().trim(), \\'y\\')');\n    assert.ok(this.$('.block-value').length, 'assert.ok(this.$(\\'.block-value\\').length)');\n    assert.equal(this.$('.block-value select > option:selected').text().trim(), 'Select value', 'assert.equal(this.$(\\'.block-value select > option:selected\\').text().trim(), \\'Select value\\')');\n    this.$('option[value=\"2\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-value select > option:selected').text().trim(), '2', 'assert.equal(this.$(\\'.block-value select > option:selected\\').text().trim(), \\'2\\')');\n    this.$('option[value=\"x\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-value select > option:selected').text().trim(), 'Select value', 'assert.equal(this.$(\\'.block-value select > option:selected\\').text().trim(), \\'Select value\\')');\n    assert.equal(this.$('.block-value select > option').text().trim(), 'Select value1', 'assert.equal(this.$(\\'.block-value select > option\\').text().trim(), \\'Select value1\\')');\n  });\n\n  (0, _emberQunit.test)('operator enabled if type and value are set', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.set('operators', ['-', '+']);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kEalAU6f\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"options\\\",\\\"operators\\\"],[[28,[\\\"options\\\"]],[28,[\\\"operators\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.notOk(this.$('.block-operator').length, 'assert.notOk(this.$(\\'.block-operator\\').length)');\n    this.$('option[value=\"y\"]').prop('selected', true).trigger('change');\n    this.$('option[value=\"2\"]').prop('selected', true).trigger('change');\n    assert.ok(this.$('.block-operator').length, 'assert.ok(this.$(\\'.block-operator\\').length)');\n  });\n\n  (0, _emberQunit.test)('operator shown if present', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.set('operators', ['-', '+']);\n    this.set('block', { 'operator': '+' });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"SpKkO5fV\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"options\\\",\\\"operators\\\",\\\"block\\\"],[[28,[\\\"options\\\"]],[28,[\\\"operators\\\"]],[28,[\\\"block\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    this.$('option[value=\"y\"]').prop('selected', true).trigger('change');\n    this.$('option[value=\"2\"]').prop('selected', true).trigger('change');\n    assert.ok(this.$('.block-operator').length, 'assert.ok(this.$(\\'.block-operator\\').length)');\n    assert.equal(this.$('.block-operator option:selected').text().trim(), '+', 'assert.equal(this.$(\\'.block-operator option:selected\\').text().trim(), \\'+\\')');\n  });\n\n  (0, _emberQunit.test)('can change operator', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.set('operators', ['-', '+']);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kEalAU6f\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"options\\\",\\\"operators\\\"],[[28,[\\\"options\\\"]],[28,[\\\"operators\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    this.$('option[value=\"y\"]').prop('selected', true).trigger('change');\n    this.$('option[value=\"2\"]').prop('selected', true).trigger('change');\n    assert.ok(this.$('.block-operator').length, 'assert.ok(this.$(\\'.block-operator\\').length)');\n    this.$('option[value=\"-\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-operator option:selected').text().trim(), '-', 'assert.equal(this.$(\\'.block-operator option:selected\\').text().trim(), \\'-\\')');\n  });\n\n  (0, _emberQunit.test)('can change operator from passed in ', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.set('operators', ['-', '+']);\n    this.set('block', { 'operator': '+' });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"SpKkO5fV\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-block\\\"],null,[[\\\"options\\\",\\\"operators\\\",\\\"block\\\"],[[28,[\\\"options\\\"]],[28,[\\\"operators\\\"]],[28,[\\\"block\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    this.$('option[value=\"y\"]').prop('selected', true).trigger('change');\n    this.$('option[value=\"2\"]').prop('selected', true).trigger('change');\n    assert.ok(this.$('.block-operator').length, 'assert.ok(this.$(\\'.block-operator\\').length)');\n    assert.equal(this.$('.block-operator option:selected').text().trim(), '+', 'assert.equal(this.$(\\'.block-operator option:selected\\').text().trim(), \\'+\\')');\n    this.$('option[value=\"-\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-operator option:selected').text().trim(), '-', 'assert.equal(this.$(\\'.block-operator option:selected\\').text().trim(), \\'-\\')');\n  });\n});","define('dummy/tests/integration/components/expression-builder-select-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('expression-builder-select', 'Integration | Component | expression builder select', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('select renders option', function (assert) {\n    this.set('options', [{ 'text': 'Select type' }]);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Yh3MIubf\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder-select\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), 'Select type', 'assert.equal(this.$().text().trim(), \\'Select type\\')');\n    assert.notOk(this.$('option').attr('disabled'), 'assert.notOk(this.$(\\'option\\').attr(\\'disabled\\'))');\n  });\n\n  (0, _emberQunit.test)('select renders option as disabled', function (assert) {\n    this.set('options', [{ 'text': 'Select type', 'disabled': true }]);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Yh3MIubf\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder-select\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), 'Select type', 'assert.equal(this.$().text().trim(), \\'Select type\\')');\n    assert.ok(this.$('option').attr('disabled'), 'assert.ok(this.$(\\'option\\').attr(\\'disabled\\'))');\n  });\n\n  (0, _emberQunit.test)('select renders option as selected', function (assert) {\n    this.set('options', [{ 'text': 'Select type', 'value': 1 }, { 'text': 'Select type2', 'value': 0 }]);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3jgalG+l\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder-select\\\"],null,[[\\\"options\\\",\\\"selected\\\"],[[28,[\\\"options\\\"]],0]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('option:selected').val(), 0, 'assert.equal(this.$(\\'option:selected\\').val(), 0)');\n  });\n\n  (0, _emberQunit.test)('select renders first option as selected if no option is selected', function (assert) {\n    this.set('options', [{ 'text': 'Select type', 'value': 1 }, { 'text': 'Select type2', 'value': 0 }]);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Yh3MIubf\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder-select\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('option:selected').val(), 1, 'assert.equal(this.$(\\'option:selected\\').val(), 1)');\n  });\n\n  (0, _emberQunit.test)('select renders a disabled option as selected if no option is selected', function (assert) {\n    this.set('options', [{ 'text': 'Select type', 'disabled': true, 'value': 1 }, { 'text': 'Select type2', 'value': 0 }]);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Yh3MIubf\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder-select\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('option:selected').val(), 1, 'assert.equal(this.$(\\'option:selected\\').val(), 1)');\n  });\n\n  (0, _emberQunit.test)('select renders option value', function (assert) {\n    this.set('options', [{ 'text': 'Select type', 'value': 123 }]);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Yh3MIubf\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder-select\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), 'Select type', 'assert.equal(this.$().text().trim(), \\'Select type\\')');\n    assert.equal(this.$('option').attr('value'), 123, 'assert.equal(this.$(\\'option\\').attr(\\'value\\'), 123)');\n  });\n\n  (0, _emberQunit.test)('select renders options', function (assert) {\n    this.set('options', [{ 'text': 'Select type' }, { 'text': 'xyz' }]);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Yh3MIubf\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder-select\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('select > option:first-child').text().trim(), 'Select type', 'assert.equal(this.$(\\'select > option:first-child\\').text().trim(), \\'Select type\\')');\n    assert.equal(this.$('select > option:last-child').text().trim(), 'xyz', 'assert.equal(this.$(\\'select > option:last-child\\').text().trim(), \\'xyz\\')');\n  });\n\n  (0, _emberQunit.test)('changing type triggers type change action', function (assert) {\n    this.set('options', [{ 'text': 'Select type', 'value': 1 }, { 'text': 'xyz', 'value': 2 }]);\n    var changed = false;\n    this.set('typeChanged', function () {\n      changed = true;\n    });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"QGHwZpJh\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder-select\\\"],null,[[\\\"options\\\",\\\"selected\\\",\\\"changeAction\\\"],[[28,[\\\"options\\\"]],1,[28,[\\\"typeChanged\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('option:selected').val(), 1, 'assert.equal(this.$(\\'option:selected\\').val(), 1)');\n    this.$('option[value=\"' + 2 + '\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('option:selected').val(), 2, 'assert.equal(this.$(\\'option:selected\\').val(), 2)');\n    assert.ok(changed, 'assert.ok(changed)');\n  });\n\n  (0, _emberQunit.test)('changing value triggers value change action', function (assert) {\n    this.set('options', [{ 'text': 'Select type', 'value': 1 }, { 'text': 'xyz', 'value': 2 }]);\n    var changed = false;\n    this.set('valueChanged', function () {\n      changed = true;\n    });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Yk8bZa8E\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder-select\\\"],null,[[\\\"options\\\",\\\"selected\\\",\\\"changeAction\\\"],[[28,[\\\"options\\\"]],1,[28,[\\\"valueChanged\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('option:selected').val(), 1, 'assert.equal(this.$(\\'option:selected\\').val(), 1)');\n    this.$('option[value=\"' + 2 + '\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('option:selected').val(), 2, 'assert.equal(this.$(\\'option:selected\\').val(), 2)');\n    assert.ok(changed, 'assert.ok(changed)');\n  });\n});","define('dummy/tests/integration/components/expression-builder-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('expression-builder', 'Integration | Component | expression builder', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('has empty text block if no options are passed', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hNYv7TMx\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"expression-builder\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('.expression-blocks').text().trim(), 'Pass options to select type', 'assert.equal(this.$(\\'.expression-blocks\\').text().trim(), \\'Pass options to select type\\')');\n    assert.equal(this.$('.expression-result').text().trim(), '', 'assert.equal(this.$(\\'.expression-result\\').text().trim(), \\'\\')');\n    assert.notOk(this.$('.add').length, 'assert.notOk(this.$(\\'.add\\').length)');\n  });\n\n  (0, _emberQunit.test)('has initial block if options are passed', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DIz7LPhj\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('.expression-blocks .block-type select > option:selected').text().trim(), 'Select type', 'assert.equal(this.$(\\'.expression-blocks .block-type select > option:selected\\').text().trim(), \\'Select type\\')');\n    assert.equal(this.$('.expression-result').text().trim(), '', 'assert.equal(this.$(\\'.expression-result\\').text().trim(), \\'\\')');\n  });\n\n  (0, _emberQunit.test)('does not have expression from placeholder block', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DIz7LPhj\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('.expression-blocks .block-type select > option:selected').text().trim(), 'Select type', 'assert.equal(this.$(\\'.expression-blocks .block-type select > option:selected\\').text().trim(), \\'Select type\\')');\n    assert.equal(this.$('.expression-result').text().trim(), '', 'assert.equal(this.$(\\'.expression-result\\').text().trim(), \\'\\')');\n  });\n\n  (0, _emberQunit.test)('has expression from block', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DIz7LPhj\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder\\\"],null,[[\\\"options\\\"],[[28,[\\\"options\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    this.$('.block-type option[value=\"y\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-type select > option:selected').text().trim(), 'y', 'assert.equal(this.$(\\'.block-type select > option:selected\\').text().trim(), \\'y\\')');\n    assert.equal(this.$('.expression-result').text().trim(), 'y', 'assert.equal(this.$(\\'.expression-result\\').text().trim(), \\'y\\')');\n    this.$('.block-value option[value=\"3\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.expression-result').text().trim(), 'y:3', 'assert.equal(this.$(\\'.expression-result\\').text().trim(), \\'y:3\\')');\n  });\n\n  (0, _emberQunit.test)('do not show operation when there is not another block', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.set('operators', ['-', '+']);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"EVChWsIO\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder\\\"],null,[[\\\"options\\\",\\\"operators\\\"],[[28,[\\\"options\\\"]],[28,[\\\"operators\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.notOk(this.$('.block-operator').length, 'assert.notOk(this.$(\\'.block-operator\\').length)');\n    this.$('.block-type option[value=\"y\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-type select > option:selected').text().trim(), 'y', 'assert.equal(this.$(\\'.block-type select > option:selected\\').text().trim(), \\'y\\')');\n    assert.equal(this.$('.expression-result').text().trim(), 'y', 'assert.equal(this.$(\\'.expression-result\\').text().trim(), \\'y\\')');\n    this.$('.block-value option[value=\"3\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.expression-result').text().trim(), 'y:3', 'assert.equal(this.$(\\'.expression-result\\').text().trim(), \\'y:3\\')');\n    assert.ok(this.$('.block-operator').length, 'assert.ok(this.$(\\'.block-operator\\').length)');\n    this.$('option[value=\"-\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-operator option:selected').text().trim(), '-', 'assert.equal(this.$(\\'.block-operator option:selected\\').text().trim(), \\'-\\')');\n    assert.ok(this.$('.block-operator').length, 'assert.ok(this.$(\\'.block-operator\\').length)');\n    assert.equal(this.$('.expression-result').text().trim(), 'y:3', 'assert.equal(this.$(\\'.expression-result\\').text().trim(), \\'y:3\\')');\n  });\n\n  (0, _emberQunit.test)('can add another block', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.set('operators', ['OR', 'AND']);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"EVChWsIO\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder\\\"],null,[[\\\"options\\\",\\\"operators\\\"],[[28,[\\\"options\\\"]],[28,[\\\"operators\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.notOk(this.$('.block-operator').length, 'assert.notOk(this.$(\\'.block-operator\\').length)');\n    this.$('.block-type option[value=\"y\"]').prop('selected', true).trigger('change');\n    this.$('.block-value option[value=\"3\"]').prop('selected', true).trigger('change');\n    this.$('.block-operator option[value=\"OR\"]').prop('selected', true).trigger('change');\n    Ember.run(function () {\n      return document.querySelector('.add').click();\n    });\n    this.$('.expression-blocks > div:nth-child(3) > .block-type option[value=\"x\"]').prop('selected', true).trigger('change');\n    this.$('.expression-blocks > div:nth-child(3) > .block-value option[value=\"1\"]').prop('selected', true).trigger('change');\n    this.$('.expression-blocks > div:nth-child(4) option[value=\"OR\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.expression-result').text().trim(), 'y:3 OR x:1', 'assert.equal(this.$(\\'.expression-result\\').text().trim(), \\'y:3 OR x:1\\')');\n    Ember.run(function () {\n      return document.querySelector('.add').click();\n    });\n    this.$('.expression-blocks > div:nth-child(5) > .block-type option[value=\"x\"]').prop('selected', true).trigger('change');\n    this.$('.expression-blocks > div:nth-child(5) > .block-value option[value=\"1\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.expression-result').text().trim(), 'y:3 OR x:1 OR x:1', 'assert.equal(this.$(\\'.expression-result\\').text().trim(), \\'y:3 OR x:1 OR x:1\\')');\n  });\n\n  (0, _emberQunit.test)('values change based on type', function (assert) {\n    this.set('options', { 'x': [1], 'y': [2, 3] });\n    this.set('operators', ['OR', 'AND']);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"EVChWsIO\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"expression-builder\\\"],null,[[\\\"options\\\",\\\"operators\\\"],[[28,[\\\"options\\\"]],[28,[\\\"operators\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    this.$('.block-type option[value=\"y\"]').prop('selected', true).trigger('change');\n    this.$('.block-value option[value=\"3\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-type select > option:selected').text().trim(), 'y', 'assert.equal(this.$(\\'.block-type select > option:selected\\').text().trim(), \\'y\\')');\n    assert.equal(this.$('.block-value select > option:selected').text().trim(), '3', 'assert.equal(this.$(\\'.block-value select > option:selected\\').text().trim(), \\'3\\')');\n    this.$('.block-type option[value=\"x\"]').prop('selected', true).trigger('change');\n    assert.equal(this.$('.block-type select > option:selected').text().trim(), 'x', 'assert.equal(this.$(\\'.block-type select > option:selected\\').text().trim(), \\'x\\')');\n    assert.equal(this.$('.block-value select > option:selected').text().trim(), 'Select value', 'assert.equal(this.$(\\'.block-value select > option:selected\\').text().trim(), \\'Select value\\')');\n  });\n});","define('dummy/tests/integration/helpers/is-equal-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('is-equal', 'helper:is-equal', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders true when parameters are equal', function (assert) {\n    this.set('inputValue', '1234');\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6AVOk/AD\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"is-equal\\\"],[[28,[\\\"inputValue\\\"]],\\\"1234\\\"],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), 'true', 'assert.equal(this.$().text().trim(), \\'true\\')');\n  });\n\n  (0, _emberQunit.test)('it renders false when parameters are not equal', function (assert) {\n    this.set('inputValue', '1234');\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"c7U3Ujiu\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"is-equal\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), 'false', 'assert.equal(this.$().text().trim(), \\'false\\')');\n  });\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/expression-block-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/expression-block-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/expression-builder-select-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/expression-builder-select-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/expression-builder-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/expression-builder-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/is-equal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/is-equal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;","file":"tests.js"}